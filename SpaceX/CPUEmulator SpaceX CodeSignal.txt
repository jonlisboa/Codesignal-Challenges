
cpuEmulator <- function(subroutine) {
  
  
  d<-1
  n<-0
  
  
  R<-c(rep(0,43))
  
  while(d <= length(subroutine) && n<=5 * 10^4){
    
    a<-subroutine[d]
    command<-substr(subroutine[d],1,3)
    
    if(command=='MOV'){
      register2<-as.numeric(sub(".*,R", "", a))+1
      register1<-sub(".*MOV *(.*?) *,.*", "\\1", a)
      if(grepl("R",register1)){
        R[register2]<-R[as.numeric(substr(register1,2,3))+1]
      }else{
        R[register2]<-as.numeric(register1)
        
      }
      d<-d+1
      n<-n+1
    }
    if(command=='ADD'){
      register2<-as.numeric(sub(".*,R", "", a))+1
      register1<-as.numeric(sub(".*ADD R*(.*?) *,.*", "\\1", a))+1
     
      R[register1]<-(R[register1]+R[register2])%%(2^32)
      d<-d+1
      n<-n+1
    }
    if(command=='DEC'){
      register<-as.numeric(sub(".*DEC R*(.*)", "\\1", a))+1
      if(R[register]==0){
        R[register]<-(2^32)-1
      }else{
        R[register]<-R[register]-1
      }
      d<-d+1
      n<-n+1
    }
    if(command=='INC'){
      register<-as.numeric(sub(".*INC R*(.*)", "\\1", a))+1
      if(R[register]==((2^32)-1)){
        R[register]<-0
        } else{
        R[register]<-R[register]+1
        }
      d<-d+1
      n<-n+1
    }
    if(command=='INV'){
      register<-as.numeric(sub(".*INV R*(.*)", "\\1", a))+1
      R[register]<-(R[register]*-1)-1
      d<-d+1
      n<-n+1
    }
    if(command=='JMP'){
      d<-as.numeric(sub(".*JMP *(.*?)", "\\1", a))
      n<-n+1
    }
    if(command=='JZ '){
      if(R[1]==0){
        d<-as.numeric(sub(".*JZ *(.*?)", "\\1", a))
      }
      if(R[1]!=0){d<-d+1}
      n<-n+1
    }
    if(command=='NOP'){
      d<-d+1
      n<-n+1
      
    }
    
    
  }
  
  return(as.character(R[43]))
  
}
